#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
import os

def remove_email_confirmation_fields():
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user"""
    
    db_path = 'flight_service.db'
    
    if not os.path.exists(db_path):
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é seed_db.py")
        return
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    backup_path = 'flight_service_backup.db'
    import shutil
    shutil.copy2(db_path, backup_path)
    print(f"–°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_path}")
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –ø–æ–ª—è
        cursor.execute("PRAGMA table_info(user)")
        columns = [column[1] for column in cursor.fetchall()]
        
        if 'is_email_confirmed' not in columns and 'email_confirmed_at' not in columns:
            print("–ü–æ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email —É–∂–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        print("–£–¥–∞–ª—è–µ–º –ø–æ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email...")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –±–µ–∑ –ø–æ–ª–µ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        cursor.execute('''
            CREATE TABLE user_new (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name VARCHAR(120) NOT NULL,
                email VARCHAR(120) UNIQUE NOT NULL,
                password_hash VARCHAR(200) NOT NULL,
                role VARCHAR(20) NOT NULL DEFAULT 'user',
                is_active BOOLEAN DEFAULT 1,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute('''
            INSERT INTO user_new (id, name, email, password_hash, role, is_active, created_at)
            SELECT id, name, email, password_hash, role, is_active, created_at
            FROM user
        ''')
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é
        cursor.execute('DROP TABLE user')
        cursor.execute('ALTER TABLE user_new RENAME TO user')
        
        conn.commit()
        print("‚úÖ –ü–æ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
        print("‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–µ–ø–µ—Ä—å –º–æ–≥—É—Ç –≤—Ö–æ–¥–∏—Ç—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email")
        
    except Exception as e:
        conn.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞
        conn.close()
        shutil.copy2(backup_path, db_path)
        print("üîÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –±—ç–∫–∞–ø–∞")
        
    finally:
        conn.close()

if __name__ == '__main__':
    remove_email_confirmation_fields()